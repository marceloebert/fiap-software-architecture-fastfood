name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Apenas para a branch principal (produção)

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17' # Ajuste conforme necessário

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Run Gradle Tests
        run: ./gradlew test

  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar \
          -Dsonar.projectKey=marceloebert_fiap-software-architecture-fastfood \
          -Dsonar.organization=marceloebert

  build:
    runs-on: ubuntu-latest
    needs: [unit-test, code-analysis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Build JAR
        run: ./gradlew build -x test

      - name: Build Docker image
        env:
          ECR_REPOSITORY: fiap-software-architecture-fastfood
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG <aws_account_id>.dkr.ecr.<region>.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Docker image to ECR
        env:
          ECR_REPOSITORY: fiap-software-architecture-fastfood
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push <aws_account_id>.dkr.ecr.<region>.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

  update-eks:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Configure kubectl
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: us-east-1

      - name: Update Kubernetes Deployment
        env:
          ECR_REPOSITORY: fiap-software-architecture-fastfood
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kubectl set image deployment/my-deployment my-container=<aws_account_id>.dkr.ecr.<region>.amazonaws.com/$ECR_REPOSITORY:${{ github.sha }}
          kubectl rollout restart deployment/my-deployment
