name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Apenas para a branch principal (produção)

env:
  REGION_DEFAULT: us-east-1  

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Run Gradle Tests
        run: ./gradlew test

  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar -Dsonar.projectKey=marceloebert_fiap-software-architecture-fastfood -Dsonar.organization=marceloebert

  build:
    runs-on: ubuntu-latest
    needs: [unit-test, code-analysis]
    
    environment: #Define a configuração de ambiente para este job
      name: AWS    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Build JAR
        run: ./gradlew build -x test

      - name: Build Docker image
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}          
        run: |
          docker build -t fiap-software-architecture-fastfood:${{ github.sha }} .
          docker tag fiap-software-architecture-fastfood:${{ github.sha }} \
          $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/fiap-software-architecture-fastfood:${{ github.sha }}

      - name: Save Docker image as file
        run: |
          docker save ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fiap-software-architecture-fastfood:${{ github.sha }} -o image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: image.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    environment: #Define a configuração de ambiente para este job
      name: AWS    
    
    steps: 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker image from file
        run: |
          docker load -i image.tar
      
      - name: Push Docker image to ECR
        env:
          REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          REPOSITORY: fiap-software-architecture-fastfood
          IMAGE_TAG: ${{ github.sha }}
        run: |          
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      
  update-eks:
    runs-on: ubuntu-latest
    needs: deploy

    environment: #Define a configuração de ambiente para este job
      name: AWS    
      
    steps:
      - name: Configure kubectl
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes Deployment
        run: |
          kubectl set image deployment/my-deployment my-container=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fiap-software-architecture-fastfood:${{ github.sha }}
          kubectl rollout restart deployment/my-deployment
